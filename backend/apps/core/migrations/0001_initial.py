# Generated by Django 5.2.2 on 2025-06-05 11:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("address", models.TextField(blank=True, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("is_librarian", models.BooleanField(default=False)),
                ("membership_date", models.DateTimeField(auto_now_add=True)),
                ("is_active_member", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("author", models.CharField(max_length=200)),
                ("isbn", models.CharField(max_length=13, unique=True)),
                ("publisher", models.CharField(max_length=100)),
                ("publication_date", models.DateField()),
                (
                    "genre",
                    models.CharField(
                        choices=[
                            ("fiction", "Fiction"),
                            ("non_fiction", "Non-Fiction"),
                            ("mystery", "Mystery"),
                            ("romance", "Romance"),
                            ("science_fiction", "Science Fiction"),
                            ("fantasy", "Fantasy"),
                            ("biography", "Biography"),
                            ("history", "History"),
                            ("science", "Science"),
                            ("technology", "Technology"),
                            ("self_help", "Self Help"),
                            ("children", "Children"),
                            ("young_adult", "Young Adult"),
                            ("poetry", "Poetry"),
                            ("drama", "Drama"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "pages",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("language", models.CharField(default="English", max_length=50)),
                ("edition", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Available"),
                            ("borrowed", "Borrowed"),
                            ("reserved", "Reserved"),
                            ("maintenance", "Under Maintenance"),
                            ("lost", "Lost"),
                            ("damaged", "Damaged"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                (
                    "total_copies",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "available_copies",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="book_covers/"),
                ),
                (
                    "shelf_location",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "average_rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("total_ratings", models.PositiveIntegerField(default=0)),
                ("times_borrowed", models.PositiveIntegerField(default=0)),
                (
                    "added_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="books_added",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Book",
                "verbose_name_plural": "Books",
                "db_table": "books",
                "ordering": ["title", "author"],
            },
        ),
        migrations.CreateModel(
            name="BookRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("review", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="core.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="book_ratings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Rating",
                "verbose_name_plural": "Book Ratings",
                "db_table": "book_ratings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Loan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("loan_date", models.DateTimeField(auto_now_add=True)),
                ("due_date", models.DateTimeField()),
                ("return_date", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("borrowed", "Borrowed"),
                            ("returned", "Returned"),
                            ("overdue", "Overdue"),
                            ("lost", "Lost"),
                            ("damaged", "Damaged"),
                        ],
                        default="borrowed",
                        max_length=20,
                    ),
                ),
                ("renewal_count", models.PositiveIntegerField(default=0)),
                ("max_renewals", models.PositiveIntegerField(default=2)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "fine_amount",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=10
                    ),
                ),
                ("fine_paid", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loans",
                        to="core.book",
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        limit_choices_to={"is_librarian": True},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="loans_issued",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "returned_to",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"is_librarian": True},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="loans_returned",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Loan",
                "verbose_name_plural": "Loans",
                "db_table": "loans",
                "ordering": ["-loan_date"],
            },
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["title"], name="books_title_7a737c_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["author"], name="books_author_1c43f5_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["isbn"], name="books_isbn_ce4a1a_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["genre"], name="books_genre_d6e4af_idx"),
        ),
        migrations.AddIndex(
            model_name="book",
            index=models.Index(fields=["status"], name="books_status_08b8fa_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="bookrating",
            unique_together={("user", "book")},
        ),
        migrations.AddIndex(
            model_name="loan",
            index=models.Index(
                fields=["user", "status"], name="loans_user_id_efac20_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loan",
            index=models.Index(
                fields=["book", "status"], name="loans_book_id_6360b6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="loan",
            index=models.Index(fields=["due_date"], name="loans_due_dat_3e4b70_idx"),
        ),
        migrations.AddIndex(
            model_name="loan",
            index=models.Index(fields=["loan_date"], name="loans_loan_da_b73343_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="loan",
            unique_together={("user", "book", "loan_date")},
        ),
    ]
